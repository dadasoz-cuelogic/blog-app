from django.shortcuts import get_object_or_404, render_to_response
from django.http import HttpResponseRedirect, HttpResponse
from django.template import RequestContext
from django.core.urlresolvers import reverse
from django.shortcuts import render,redirect
from blogs.models import Blogs
from blogs.forms import BlogForm
from auths.models import Registration
from django.template.response import TemplateResponse
from datetime import datetime
from django.views.generic.edit import UpdateView


# Create your views here.
data={}

data.update({"login":"","view_name":"blogs"})

def loginDetails(request):
    if request.session.get('login'):
	data.update({"login":request.session['login']})
    else:
        return redirect('/login')

def index(request):
    loginDetails(request)
    data["view_name"] = "home"
    latest_blogs_list = Blogs.objects.all().order_by('-pub_date')[:5]
    data.update({'latest_blogs_list': latest_blogs_list})
    return render_to_response('tpl1/blogs.html',  RequestContext(request, data))

def blogs(request):
    loginDetails(request)
    data["view_name"] = "blogs"
    latest_blogs_list = Blogs.objects.all().order_by('-pub_date')[:5]
    data.update({'latest_blogs_list': latest_blogs_list})
    return render_to_response('tpl1/blogs.html',  RequestContext(request, data))

def detail(request, blog_id):
    loginDetails(request)
    try:
        blog = Blogs.objects.get(pk=blog_id)
        data.update({'blog': blog})
    except Poll.DoesNotExist:
        raise Http404
    return render_to_response('tpl1/detail.html', RequestContext(request, data))


def saveBlog(request):
    loginDetails(request)
    blog_title=request.POST["blog_title"]
    blog_contents=request.POST["blog_contents"]
    user_id=data["login"]["id"]
    reg_obj=Registration.objects.get(id=user_id)
    blog_obj=Blogs(blog_title=blog_title, blog_contents=blog_contents,user_id=reg_obj,pub_date=datetime.now());
    blog_obj.save()
    return True

def create(request):
    loginDetails(request)    
    data["view_name"]="create"
    msg=""
    form = BlogForm(request.POST)
    if request.method == 'GET':
        print "Get"
    elif request.method == 'POST':
       # if form.is_valid():
       saveBlog(request)
       msg="Blog saved successfully!"

    data.update({"form":form,"msg":msg})

    response = TemplateResponse(request, 'tpl1/createBlog.html', data)

    return response

def myblogs(request):
    loginDetails(request)
    data["view_name"]="myblogs"
    latest_blogs_list = Blogs.objects.filter(user_id=data["login"]["id"]).order_by('-pub_date')[:10]
    data.update({'latest_blogs_list': latest_blogs_list})
    return render_to_response('tpl1/myBlogs.html',  RequestContext(request, data))    

def edit(request,blog_id):
    loginDetails(request)    
    data["view_name"]="editBlog"
    msg=""
    record = Blogs(id=blog_id)
    form = BlogForm(request.POST)
    if request.method == 'POST':
        if form.is_valid():
            blog_title=request.POST["blog_title"]
            id=request.POST["id"]
            blog_contents=request.POST["blog_contents"]
            user_id=data["login"]["id"]
            reg_obj=Registration.objects.get(id=user_id)
            blog_form = Blogs(blog_title=blog_title, blog_contents=blog_contents,user_id=reg_obj,pub_date=datetime.now(),id=id)
            blog_form.save()
            msg="Blog saved successfully!"
        else:
            msg="Invalid Security Code!"
    else:
        a=Blogs.objects.get(pk=int(blog_id))
        form = BlogForm(instance=a)
        data.update({"blog_id":blog_id})
    data.update({"blog_id":blog_id})    
    data.update({"form":form,"msg":msg})

    response = TemplateResponse(request, 'tpl1/editBlog.html', data)

    return response

def delete(request,blog_id):
    delete = Blogs.objects.get(pk=blog_id).delete()
    return redirect('/blogs/myblogs/')
